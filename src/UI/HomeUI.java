/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package UI;

/**
 * Background image was generated by ChatGPT
 *
 * @author imshi
 */
import Auth.Authentication;
import File.FileHandler;
import Swipe.Swipe;
import User.User;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.io.InputStream;
import java.util.List;
import java.util.stream.Collectors;
import javax.imageio.ImageIO;
import javax.swing.Timer;

public class HomeUI extends JFrame {

    private final Authentication auth;
    private final FileHandler fileHandler;
    private final Swipe swipe;
    private JLabel welcomeLabel;
    private Timer colorTimer;
    private boolean toggleColor = true;
    private final Color color1 = new Color(227, 11, 92);
    private final Color color2 = new Color(255, 16, 240);

    public HomeUI(Authentication auth, FileHandler fileHandler) {
        this.auth = auth;
        this.fileHandler = fileHandler;
        this.swipe = new Swipe(fileHandler);
        initializeUI();
    }

    private void initializeUI() {
        setTitle("Home");
        setSize(1100, 650);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);
        setLayout(new BorderLayout());

        try {
            InputStream iconInputStream = getClass().getResourceAsStream("/resources/icon.png");
            BufferedImage iconImage = ImageIO.read(iconInputStream);
            setIconImage(iconImage);
        } catch (Exception e) {
            e.printStackTrace();
        }

        JLabel backgroundLabel = new JLabel();
        InputStream bgInputStream = getClass().getResourceAsStream("/resources/bgmainmenu.jpg");
        try {
            BufferedImage bgImage = ImageIO.read(bgInputStream);
            Image scaledBgImage = bgImage.getScaledInstance(1100, 650, Image.SCALE_SMOOTH);
            backgroundLabel.setIcon(new ImageIcon(scaledBgImage));
            backgroundLabel.setSize(1100, 650);
            backgroundLabel.setHorizontalAlignment(SwingConstants.CENTER);
            backgroundLabel.setVerticalAlignment(SwingConstants.CENTER);
        } catch (Exception e) {
            e.printStackTrace();
        }

        Font balloonFont = null;
        Font heyamFont = null;
        try {
            InputStream balloonFontInputStream = getClass().getResourceAsStream("/resources/balloon.ttf");
            balloonFont = Font.createFont(Font.TRUETYPE_FONT, balloonFontInputStream).deriveFont(32f);
            GraphicsEnvironment g = GraphicsEnvironment.getLocalGraphicsEnvironment();
            g.registerFont(balloonFont);

            InputStream heyamFontInputStream = getClass().getResourceAsStream("/resources/heyam.ttf");
            heyamFont = Font.createFont(Font.TRUETYPE_FONT, heyamFontInputStream).deriveFont(25f);
            GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
            ge.registerFont(heyamFont);
        } catch (Exception e) {
            e.printStackTrace();
            balloonFont = new Font("Arial", Font.BOLD, 32);
            heyamFont = new Font("Arial", Font.BOLD, 18);
        }

        JLayeredPane layeredPane = new JLayeredPane();
        layeredPane.setPreferredSize(new Dimension(1100, 650));
        backgroundLabel.setSize(1100, 650);
        layeredPane.add(backgroundLabel, Integer.valueOf(0));

        welcomeLabel = new JLabel("Sherder");
        welcomeLabel.setFont(balloonFont.deriveFont(Font.BOLD, 46f));
        welcomeLabel.setForeground(color1);
        welcomeLabel.setHorizontalAlignment(SwingConstants.CENTER);
        welcomeLabel.setBounds(460, 130, 200, 110);
        layeredPane.add(welcomeLabel, Integer.valueOf(1));

        JPanel panel = new JPanel(new GridBagLayout());
        panel.setOpaque(false);
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(10, 0, 0, 0);
        gbc.fill = GridBagConstraints.HORIZONTAL;

        gbc.gridy = 0;
        panel.add(createButton("Login", heyamFont, e -> new LoginUI(auth).setVisible(true)), gbc);

        gbc.gridy++;
        panel.add(createButton("Register", heyamFont, e -> new RegistrationUI(auth).setVisible(true)), gbc);

        gbc.gridy++;
        panel.add(createButton("Edit Profile", heyamFont, e -> {
            if (auth.getCurrentUser() != null) {
                new ProfileUI(auth, fileHandler).setVisible(true);
                dispose();
            } else {
                JOptionPane.showMessageDialog(null, "Please login first.");
            }
        }), gbc);

        gbc.gridy++;
        gbc.insets = new Insets(35, 0, 0, 0);
        panel.add(createButton("Exit", heyamFont, e -> System.exit(0)), gbc); // Modified line

        JButton swipeButton = createOvalButton("Swipe", heyamFont.deriveFont(25f), e -> {
            if (auth.getCurrentUser() != null) {
                swipe.generateUserProfiles();
                new SwipeUI(swipe, auth, fileHandler).setVisible(true);
                dispose();
            } else {
                JOptionPane.showMessageDialog(null, "Please login first.");
            }
        });
        swipeButton.setBounds(200, 270, 200, 110);
        layeredPane.add(swipeButton, Integer.valueOf(1));

        JButton viewMatchesButton = createOvalButton("View Matches", heyamFont.deriveFont(25f), e -> {
            if (auth.getCurrentUser() != null) {
                List<User> matchedUsers = fileHandler.readMatchesFile().stream()
                        .map(User::fromString)
                        .collect(Collectors.toList());
                new MatchUI(matchedUsers, auth, fileHandler).setVisible(true);
                dispose();
            } else {
                JOptionPane.showMessageDialog(null, "Please login first.");
            }
        });
        viewMatchesButton.setBounds(710, 270, 200, 110);
        layeredPane.add(viewMatchesButton, Integer.valueOf(1));

        int panelHeight = 300;
        panel.setBounds((1100 - 385) / 2, (800 - panelHeight) / 2 - 50, 400, panelHeight);
        layeredPane.add(panel, Integer.valueOf(1));

        add(layeredPane, BorderLayout.CENTER);
        pack();
        setResizable(false);

        startColorAndMovementTimers();
    }

    private void startColorAndMovementTimers() {
        colorTimer = new Timer(500, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                toggleColor = !toggleColor;
                welcomeLabel.setForeground(toggleColor ? color1 : color2);
            }
        });
        colorTimer.start();
    }

    private JButton createButton(String text, Font font, ActionListener actionListener) {
        JButton button = new JButton(text) {
            protected void paintComponent(Graphics g) {
                if (getModel().isPressed()) {
                    g.setColor(new Color(192, 57, 43));
                } else if (getModel().isRollover()) {
                    g.setColor(new Color(243, 58, 106));
                } else {
                    g.setColor(new Color(255, 105, 180));
                }
                g.fillRoundRect(0, 0, getWidth(), getHeight(), 30, 30);
                super.paintComponent(g);
            }

            protected void paintBorder(Graphics g) {
                g.setColor(getBackground());
                g.drawRoundRect(0, 0, getWidth() - 1, getHeight() - 1, 30, 30);
            }
        };
        button.setFont(font);
        button.setForeground(Color.WHITE);
        button.setContentAreaFilled(false);
        button.setFocusPainted(false);
        button.setPreferredSize(new Dimension(170, 45));
        button.addActionListener(actionListener);
        button.addMouseListener(new MouseAdapter() {
            public void mouseEntered(MouseEvent e) {
                button.setFont(font.deriveFont(28f));
                button.setPreferredSize(new Dimension(170, 55));
                button.repaint();
            }

            public void mouseExited(MouseEvent e) {
                button.setFont(font.deriveFont(25f));
                button.setPreferredSize(new Dimension(170, 45));
                button.repaint();
            }
        });
        return button;
    }

    private JButton createOvalButton(String text, Font font, ActionListener actionListener) {
        JButton button = new JButton(text) {
            protected void paintComponent(Graphics g) {
                if (getModel().isPressed()) {
                    g.setColor(new Color(192, 57, 43));
                } else if (getModel().isRollover()) {
                    g.setColor(new Color(243, 58, 106));
                } else {
                    g.setColor(new Color(255, 105, 180));
                }
                g.fillOval(0, 0, getWidth(), getHeight());
                super.paintComponent(g);
            }

            protected void paintBorder(Graphics g) {
                g.setColor(getBackground());
                g.drawOval(0, 0, getWidth() - 1, getHeight() - 1);
            }
        };
        button.setFont(font);
        button.setForeground(Color.WHITE);
        button.setContentAreaFilled(false);
        button.setFocusPainted(false);
        button.setPreferredSize(new Dimension(200, 60));
        button.addActionListener(actionListener);
        button.addMouseListener(new MouseAdapter() {
            public void mouseEntered(MouseEvent e) {
                button.setFont(font.deriveFont(30f));
                button.repaint();
            }

            public void mouseExited(MouseEvent e) {
                button.setFont(font.deriveFont(25f));
                button.repaint();
            }
        });
        return button;
    }
}
