/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package UI;

/**
 * Background image and group of friend were generated by ChatGPT
 *
 * @author imshi
 */

import Auth.Authentication;
import File.FileHandler;

import javax.swing.*;
import java.awt.*;
import java.io.InputStream;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import javax.imageio.ImageIO;

public class WelcomeMessageUI extends JFrame {

    private JButton startButton;
    private JLabel welcomeLabel1;
    private JLabel welcomeLabel2;
    private JLabel imageLabel;
    private final Authentication auth;
    private final FileHandler fileHandler;

    public WelcomeMessageUI(Authentication auth, FileHandler fileHandler) {
        this.auth = auth;
        this.fileHandler = fileHandler;
        initializeUI();
    }

    private void initializeUI() {
        setTitle("SherDer");
        setSize(1100, 650);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);
        setLayout(new BorderLayout());

        try {
            InputStream iconInputStream = getClass().getResourceAsStream("/resources/icon.png");
            BufferedImage iconImage = ImageIO.read(iconInputStream);
            setIconImage(iconImage);

        } catch (Exception e) {
            e.printStackTrace();
        }

        JLabel backgroundLabel = new JLabel();
        InputStream bgInputStream = getClass().getResourceAsStream("/resources/bg.jpg");
        try {
            BufferedImage bgImage = ImageIO.read(bgInputStream);
            Image scaledBgImage = bgImage.getScaledInstance(1100, 650, Image.SCALE_SMOOTH);
            backgroundLabel.setIcon(new ImageIcon(scaledBgImage));
            backgroundLabel.setSize(1100, 650);
            backgroundLabel.setHorizontalAlignment(SwingConstants.CENTER);
            backgroundLabel.setVerticalAlignment(SwingConstants.CENTER);
        } catch (Exception e) {
            e.printStackTrace();
        }

        Font balloonFont = null;
        Font heyamFont = null;
        try {
            InputStream balloonFontInputStream = getClass().getResourceAsStream("/resources/balloon.ttf");
            balloonFont = Font.createFont(Font.TRUETYPE_FONT, balloonFontInputStream).deriveFont(32f);
            GraphicsEnvironment g = GraphicsEnvironment.getLocalGraphicsEnvironment();
            g.registerFont(balloonFont);

            InputStream heyamFontInputStream = getClass().getResourceAsStream("/resources/heyam.ttf");

            heyamFont = Font.createFont(Font.TRUETYPE_FONT, heyamFontInputStream).deriveFont(25f);
            GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
            ge.registerFont(heyamFont);
        } catch (Exception e) {
            e.printStackTrace();
            balloonFont = new Font("Arial", Font.BOLD, 32);
            heyamFont = new Font("Arial", Font.BOLD, 18);
        }

        JLayeredPane layeredPane = new JLayeredPane();
        layeredPane.setPreferredSize(new Dimension(1100, 650));
        backgroundLabel.setSize(1100, 650);
        layeredPane.add(backgroundLabel, Integer.valueOf(0));

        JPanel panel = new JPanel(new GridBagLayout());
        panel.setOpaque(false);
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(5, 20, 5, 20);
        gbc.anchor = GridBagConstraints.CENTER;

        welcomeLabel1 = createLabel("Welcome to", balloonFont);
        welcomeLabel2 = createLabel("THE SHERDER", balloonFont.deriveFont(Font.BOLD, 36f));

        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.insets = new Insets(0, 0, 0, 0);
        panel.add(welcomeLabel1, gbc);

        gbc.gridy++;
        gbc.insets = new Insets(0, 0, -50, 0);
        panel.add(welcomeLabel2, gbc);

        imageLabel = new JLabel();
        InputStream imageInputStream = getClass().getResourceAsStream("/resources/welcome.png");
        try {
            BufferedImage image = ImageIO.read(imageInputStream);
            Image scaledImage = image.getScaledInstance(400, 300, Image.SCALE_SMOOTH);
            imageLabel.setIcon(new ImageIcon(scaledImage));
        } catch (Exception e) {
            e.printStackTrace();
        }

        gbc.gridy++;
        gbc.insets = new Insets(0, 0, -25, 0);
        panel.add(imageLabel, gbc);

        gbc.gridy++;
        gbc.insets = new Insets(0, 10, 10, 0);
        startButton = createStartButton(heyamFont.deriveFont(25f));
        panel.add(startButton, gbc);

        int panelHeight = 500;
        panel.setBounds((1100 - 400) / 2, 0, 400, panelHeight);
        layeredPane.add(panel, Integer.valueOf(1));

        add(layeredPane, BorderLayout.CENTER);
        pack();
        setResizable(false);
    }

    private JLabel createLabel(String text, Font font) {
        JLabel label = new JLabel(text);
        label.setFont(font);
        label.setForeground(new Color(255, 20, 147));
        label.setHorizontalAlignment(SwingConstants.CENTER);
        return label;
    }

    private JButton createStartButton(Font font) {
        JButton button = new JButton("START APPLICATION") {
            protected void paintComponent(Graphics g) {
                if (getModel().isPressed()) {
                    g.setColor(new Color(243, 58, 106));
                } else if (getModel().isRollover()) {
                    g.setColor(new Color(243, 58, 106));
                } else {
                    g.setColor(new Color(255, 105, 180));
                }
                g.fillRoundRect(0, 0, getWidth(), getHeight(), 30, 30);
                super.paintComponent(g);
            }

            protected void paintBorder(Graphics g) {
                g.setColor(getBackground());
                g.drawRoundRect(0, 0, getWidth() - 1, getHeight() - 1, 30, 30);
            }
        };
        button.setFont(font);
        button.setForeground(Color.WHITE);
        button.setContentAreaFilled(false);
        button.setFocusPainted(false);
        button.setPreferredSize(new Dimension(250, 50));
        button.addActionListener(startButtonAction());

        button.addMouseListener(new MouseAdapter() {
            public void mouseEntered(MouseEvent e) {
                button.setFont(font.deriveFont(28f));
                button.setPreferredSize(new Dimension(260, 60));
                button.repaint();
            }

            public void mouseExited(MouseEvent e) {
                button.setFont(font.deriveFont(25f));
                button.setPreferredSize(new Dimension(250, 50));
                button.repaint();
            }
        });
        return button;
    }

    private ActionListener startButtonAction() {
        return e -> {
            new HomeUI(auth, fileHandler).setVisible(true);
            dispose();
        };
    }
}
