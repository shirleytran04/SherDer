/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package UI;

/**
 * Background image and button were generated by ChatGPT
 * 
 * @author imshi
 */

import Auth.Authentication;
import Auth.SessionManager;
import User.User;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.io.InputStream;
import javax.imageio.ImageIO;

public class LoginUI extends JFrame {

    private JTextField usernameField;
    private JPasswordField passwordField;
    private final Authentication auth;

    public LoginUI(Authentication auth) {
        this.auth = auth;
        initializeUI();
    }

    private void initializeUI() {
        setTitle("Login");
        setSize(650, 530);
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        setLocationRelativeTo(null);
        setLayout(new BorderLayout());

        try {
            InputStream iconInputStream = getClass().getResourceAsStream("/resources/icon.png");
            if (iconInputStream != null) {
                BufferedImage iconImage = ImageIO.read(iconInputStream);
                setIconImage(iconImage);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        JLabel backgroundLabel = new JLabel();
        InputStream bgInputStream = getClass().getResourceAsStream("/resources/bglogin.jpg");
        try {
            BufferedImage bgImage = ImageIO.read(bgInputStream);
            Image scaledBgImage = bgImage.getScaledInstance(650, 530, Image.SCALE_SMOOTH);
            backgroundLabel.setIcon(new ImageIcon(scaledBgImage));
            backgroundLabel.setSize(650, 530);
            backgroundLabel.setHorizontalAlignment(SwingConstants.CENTER);
            backgroundLabel.setVerticalAlignment(SwingConstants.CENTER);
        } catch (Exception e) {
            e.printStackTrace();
        }

        Font balloonFont = null;
        Font heyamFont = null;
        try {
            InputStream balloonFontInputStream = getClass().getResourceAsStream("/resources/balloon.ttf");
            balloonFont = Font.createFont(Font.TRUETYPE_FONT, balloonFontInputStream).deriveFont(32f);
            GraphicsEnvironment g = GraphicsEnvironment.getLocalGraphicsEnvironment();
            g.registerFont(balloonFont);

            InputStream heyamFontInputStream = getClass().getResourceAsStream("/resources/heyam.ttf");
            heyamFont = Font.createFont(Font.TRUETYPE_FONT, heyamFontInputStream).deriveFont(25f);
            GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
            ge.registerFont(heyamFont);
        } catch (Exception e) {
            e.printStackTrace();
            balloonFont = new Font("Arial", Font.BOLD, 32);
            heyamFont = new Font("Arial", Font.BOLD, 18);
        }

        JLayeredPane layeredPane = new JLayeredPane();
        layeredPane.setPreferredSize(new Dimension(650, 530));
        backgroundLabel.setSize(650, 530);
        layeredPane.add(backgroundLabel, Integer.valueOf(0));

        JPanel panel = new JPanel(new GridBagLayout());
        panel.setOpaque(false);
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(0, 0, 0, 0);
        gbc.fill = GridBagConstraints.HORIZONTAL;

        JLabel usernameLabel = new JLabel("USERNAME:");
        usernameLabel.setFont(heyamFont);
        usernameLabel.setForeground(Color.WHITE);
        JLabel passwordLabel = new JLabel("PASSWORD:");
        passwordLabel.setFont(heyamFont);
        passwordLabel.setForeground(Color.WHITE);

        usernameField = new JTextField(50);
        usernameField.setPreferredSize(new Dimension(250, 35));

        passwordField = new JPasswordField(50);
        passwordField.setPreferredSize(new Dimension(250, 35));

        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.gridwidth = 2;
        gbc.insets = new Insets(0, -450, 0, -0);
        panel.add(usernameLabel, gbc);

        gbc.gridy++;
        panel.add(usernameField, gbc);

        gbc.gridy++;
        panel.add(passwordLabel, gbc);

        gbc.gridy++;
        panel.add(passwordField, gbc);

        gbc.gridy++;
        gbc.insets = new Insets(-10, 200, 0, -50);
        panel.add(createLoginButton(), gbc);

        panel.setBounds(170, 210, 350, 300);
        layeredPane.add(panel, Integer.valueOf(1));

        add(layeredPane, BorderLayout.CENTER);
        pack();
        setResizable(false);
    }

    private void handleLogin() {
        String username = usernameField.getText().trim();
        String password = new String(passwordField.getPassword()).trim();

        User user = auth.login(username, password);
        if (user != null) {
            SessionManager.login(user);
            JOptionPane.showMessageDialog(this, "Login successful.");
            dispose();
        } else {
            JOptionPane.showMessageDialog(this, "Invalid username or password.");
        }
    }

    private JButton createLoginButton() {
        return createImageButton("/resources/Loginbutton.png", e -> handleLogin());
    }

    private JButton createImageButton(String imagePath, ActionListener actionListener) {
        JButton button = new JButton();
        try {
            InputStream inputStream = getClass().getResourceAsStream(imagePath);
            BufferedImage image = ImageIO.read(inputStream);
            ImageIcon icon = new ImageIcon(image.getScaledInstance(140, 140, Image.SCALE_SMOOTH));
            button.setIcon(icon);
        } catch (Exception e) {
            e.printStackTrace();
        }

        button.setContentAreaFilled(false);
        button.setBorderPainted(false);
        button.setFocusPainted(false);
        button.setPreferredSize(new Dimension(140, 140));
        button.addActionListener(actionListener);

        button.addMouseListener(new MouseAdapter() {
            public void mouseEntered(MouseEvent e) {
                try {
                    InputStream inputStream = getClass().getResourceAsStream(imagePath);
                    if (inputStream != null) {
                        BufferedImage image = ImageIO.read(inputStream);
                        ImageIcon icon = new ImageIcon(image.getScaledInstance(160, 160, Image.SCALE_SMOOTH));
                        button.setIcon(icon);
                    }
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
                button.setPreferredSize(new Dimension(160, 160));
                button.repaint();
            }

            public void mouseExited(MouseEvent e) {
                try {
                    InputStream inputStream = getClass().getResourceAsStream(imagePath);
                    if (inputStream != null) {
                        BufferedImage image = ImageIO.read(inputStream);
                        ImageIcon icon = new ImageIcon(image.getScaledInstance(140, 140, Image.SCALE_SMOOTH));
                        button.setIcon(icon);
                    }
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
                button.setPreferredSize(new Dimension(140, 140));
                button.repaint();
            }
        });

        return button;
    }
}